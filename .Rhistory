names(tree_data)
tree_data <- tree_data %>%
mutate(Genus = str_extract(ScientificName, "^[^ ]+"))
library(tidyverse)
library(stringr)
library(ggplot2)
library(dplyr)
library(stringr)
tree_data <- read_csv("C:/Users/Collins/Desktop/Freelancer/Work2/Assignment2/Assignment2/TS3_Raw_tree_data.csv", show_col_types = FALSE)
str(tree_data)
glimpse(tree_data)
colSums(is.na(tree_data))
# Ensure necessary libraries are loaded
library(dplyr)
library(stringr)
# Add City and State columns while keeping all existing columns
tree_data <- tree_data %>%
mutate(
City = str_extract(City, "^[^,]+"),          # Extract city name before the comma
State = str_extract(City, "[A-Z]{2}$")      # Extract state abbreviation at the end
)
# Print the updated data to confirm
print(tree_data, n = Inf)
colnames(tree_data)
state_counts <- tree_data %>%
group_by(State) %>%
summarise(RecordCount = n()) %>%
arrange(desc(RecordCount))
ggplot(state_counts, aes(x = reorder(State, -RecordCount), y = RecordCount)) +
geom_bar(stat = "identity") +
labs(title = "Sample Sizes by State", x = "State", y = "Number of Records") +
theme_minimal()
tree_data <- tree_data %>%
mutate(State = str_extract(City, "[A-Z]{2}$")) %>% # Extract the state abbreviation from City
select(City, State) %>% # Keep only City and State columns
distinct() # Remove duplicate rows
# Print the updated data to confirm
print(tree_data, n = Inf)
colnames(tree_data)
state_counts <- tree_data %>%
group_by(State) %>%
summarise(RecordCount = n()) %>%
arrange(desc(RecordCount))
nc_sc_data <- tree_data %>%
filter(State %in% c("NC", "SC"))
cities <- nc_sc_data %>%
distinct(City) %>%
pull(City)
print(cities)
city_data <- data.frame(City = cities)
# Visualize the distinct cities as a bar chart (frequency of occurrences)
ggplot(city_data, aes(x = reorder(City, City))) +
geom_bar(fill = "steelblue") +
labs(
title = "Visualization of Distinct Cities",
x = "City",
y = "Count"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1), # Rotate city labels
axis.title.x = element_blank()                    # Optional: Remove x-axis label
)
names(tree_data)
tree_data <- tree_data %>%
mutate(Genus = str_extract(ScientificName, "^[^ ]+"))
library(tidyverse)
library(stringr)
library(ggplot2)
library(dplyr)
library(stringr)
tree_data <- read_csv("C:/Users/Collins/Desktop/Freelancer/Work2/Assignment2/Assignment2/TS3_Raw_tree_data.csv", show_col_types = FALSE)
str(tree_data)
glimpse(tree_data)
colSums(is.na(tree_data))
tree_data <- tree_data %>%
mutate(State = str_extract(City, "[A-Z]{2}$")) %>% # Extract the state abbreviation from City
select(City, State) %>% # Keep only City and State columns
distinct() # Remove duplicate rows
# Print the updated data to confirm
print(tree_data, n = Inf)
colnames(tree_data)
state_counts <- tree_data %>%
group_by(State) %>%
summarise(RecordCount = n()) %>%
arrange(desc(RecordCount))
ggplot(state_counts, aes(x = reorder(State, -RecordCount), y = RecordCount)) +
geom_bar(stat = "identity") +
labs(title = "Sample Sizes by State", x = "State", y = "Number of Records") +
theme_minimal()
tree_data <- tree_data %>%
mutate(State = str_extract(City, "[A-Z]{2}$")) %>% # Extract the state abbreviation from City
select(City, State) %>% # Keep only City and State columns
distinct() # Remove duplicate rows
# Print the updated data to confirm
print(tree_data, n = Inf)
colnames(tree_data)
state_counts <- tree_data %>%
group_by(State) %>%
summarise(RecordCount = n()) %>%
arrange(desc(RecordCount))
nc_sc_data <- tree_data %>%
filter(State %in% c("NC", "SC"))
cities <- nc_sc_data %>%
distinct(City) %>%
pull(City)
print(cities)
city_data <- data.frame(City = cities)
# Visualize the distinct cities as a bar chart (frequency of occurrences)
ggplot(city_data, aes(x = reorder(City, City))) +
geom_bar(fill = "steelblue") +
labs(
title = "Visualization of Distinct Cities",
x = "City",
y = "Count"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1), # Rotate city labels
axis.title.x = element_blank()                    # Optional: Remove x-axis label
)
names(tree_data)
tree_data <- tree_data %>%
mutate(Genus = str_extract(ScientificName, "^[^ ]+"))
tree_data <- tree_data %>%
mutate(State = str_extract(City, "[A-Z]{2}$")) %>% # Extract the state abbreviation from City
select(City, State) %>% # Keep only City and State columns
distinct() # Remove duplicate rows
# Print the updated data to confirm
print(city_data, n = Inf)
library(tidyverse)
library(stringr)
library(ggplot2)
library(dplyr)
library(stringr)
tree_data <- read_csv("C:/Users/Collins/Desktop/Freelancer/Work2/Assignment2/Assignment2/TS3_Raw_tree_data.csv", show_col_types = FALSE)
str(tree_data)
glimpse(tree_data)
colSums(is.na(tree_data))
tree_data <- tree_data %>%
mutate(State = str_extract(City, "[A-Z]{2}$")) %>% # Extract the state abbreviation from City
select(City, State) %>% # Keep only City and State columns
distinct() # Remove duplicate rows
# Print the updated data to confirm
print(city_data, n = Inf)
colnames(tree_data)
state_counts <- tree_data %>%
group_by(State) %>%
summarise(RecordCount = n()) %>%
arrange(desc(RecordCount))
ggplot(state_counts, aes(x = reorder(State, -RecordCount), y = RecordCount)) +
geom_bar(stat = "identity") +
labs(title = "Sample Sizes by State", x = "State", y = "Number of Records") +
theme_minimal()
tree_data <- tree_data %>%
mutate(State = str_extract(City, "[A-Z]{2}$")) %>% # Extract the state abbreviation from City
select(City, State) %>% # Keep only City and State columns
distinct() # Remove duplicate rows
# Print the updated data to confirm
print(tree_data, n = Inf)
colnames(tree_data)
state_counts <- tree_data %>%
group_by(State) %>%
summarise(RecordCount = n()) %>%
arrange(desc(RecordCount))
nc_sc_data <- tree_data %>%
filter(State %in% c("NC", "SC"))
cities <- nc_sc_data %>%
distinct(City) %>%
pull(City)
print(cities)
city_data <- data.frame(City = cities)
# Visualize the distinct cities as a bar chart (frequency of occurrences)
ggplot(city_data, aes(x = reorder(City, City))) +
geom_bar(fill = "steelblue") +
labs(
title = "Visualization of Distinct Cities",
x = "City",
y = "Count"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1), # Rotate city labels
axis.title.x = element_blank()                    # Optional: Remove x-axis label
)
names(tree_data)
tree_data <- tree_data %>%
mutate(Genus = str_extract(ScientificName, "^[^ ]+"))
tree_data <- tree_data %>%
mutate(State = str_extract(City, "[A-Z]{2}$")) %>% # Extract the state abbreviation from City
select(City, State) %>% # Keep only City and State columns
distinct() # Remove duplicate rows
# Print the updated data to confirm
print(city_data, n = Inf)
tree_data <- tree_data %>%
mutate(State = str_extract(City, "[A-Z]{2}$")) %>% # Extract the state abbreviation from City
select(City, State) %>% # Keep only City and State columns
distinct() # Remove duplicate rows
# Print the updated data to confirm
print(tree_data, n = Inf)
tree_data <- tree_data %>%
mutate(State = str_extract(City, "[A-Z]{2}$")) %>% # Extract the state abbreviation from City
select(City, State) %>% # Keep only City and State columns
distinct() # Remove duplicate rows
# Print the updated data to confirm
print(City_State_data, n = Inf)
city_state_data <- tree_data %>%
mutate(
State = str_extract(City, "[A-Z]{2}$")  # Extract the state abbreviation from City
) %>%
select(City, State) %>% # Keep only City and State columns
distinct()              # Remove duplicate rows
# Print the new dataset to confirm
print(city_state_data, n = Inf)
colnames(tree_data)
colnames(tree_data)
library(tidyverse)
library(stringr)
library(ggplot2)
library(dplyr)
library(stringr)
tree_data <- read_csv("C:/Users/Collins/Desktop/Freelancer/Work2/Assignment2/Assignment2/TS3_Raw_tree_data.csv", show_col_types = FALSE)
str(tree_data)
glimpse(tree_data)
colSums(is.na(tree_data))
city_state_data <- tree_data %>%
mutate(
State = str_extract(City, "[A-Z]{2}$")  # Extract the state abbreviation from City
) %>%
select(City, State) %>% # Keep only City and State columns
distinct()              # Remove duplicate rows
# Print the new dataset to confirm
print(city_state_data, n = Inf)
colnames(tree_data)
state_counts <- tree_data %>%
group_by(State) %>%
summarise(RecordCount = n()) %>%
arrange(desc(RecordCount))
state_counts_tree_data <- tree_data %>%
group_by(State) %>%
summarise(RecordCount = n(), .groups = "drop") %>%
arrange(desc(RecordCount))
merged_data <- tree_data %>%
left_join(city_state_data, by = "City")
merged_data <- tree_data %>%
left_join(city_state_data, by = "City")
state_counts <- merged_data %>%
filter(!is.na(State)) %>% # Ensure valid State entries
group_by(State) %>%
summarise(RecordCount = n(), .groups = "drop") %>%
arrange(desc(RecordCount))
# Print the results
print("Record Counts by State:")
print(state_counts, n = Inf)
merged_data <- tree_data %>%
left_join(city_state_data, by = "City")
state_counts <- merged_data %>%
filter(!is.na(State)) %>% # Ensure valid State entries
group_by(State) %>%
summarise(RecordCount = n(), .groups = "drop") %>%
arrange(desc(RecordCount))
# Print the results
print("Record Counts by State:")
print(state_counts, n = Inf)
ggplot(state_counts, aes(x = reorder(State, -RecordCount), y = RecordCount)) +
geom_bar(stat = "identity", fill = "skyblue") +  # Create bar plot
theme_minimal() +                               # Apply minimal theme
labs(
title = "Record Counts by State",
x = "State",
y = "Record Count"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
nc_sc_data <- state_counts %>%
filter(State %in% c("NC", "SC"))
nc_sc_data <- state_counts %>%
filter(State %in% c("NC", "SC"))
cities <- nc_sc_data %>%
distinct(City) %>%
pull(City)
# Filter data for NC and SC
nc_sc_data <- merged_data %>%
filter(State %in% c("NC", "SC"))
# Extract distinct cities from the filtered data
cities <- nc_sc_data %>%
distinct(City) %>%
pull(City)
# Print the distinct cities
print(cities)
nc_sc_data <- merged_data %>%
mutate(Genus = str_extract(ScientificName, "^[^ ]+"))
nc_sc_data <- merged_data %>%
mutate(Genus = str_extract(ScientificName, "^[^ ]+"))
genus_crown <- nc_sc_data %>%
group_by(Genus) %>%
summarise(AverageCrown = mean(`AvgCdia (m)`, na.rm = TRUE)) %>%
arrange(desc(AverageCrown))
nc_sc_data <- merged_data %>%
mutate(Genus = str_extract(ScientificName, "^[^ ]+"))
genus_crown <- nc_sc_data %>%
group_by(Genus) %>%
summarise(AverageCrown = mean(`AvgCdia (m)`, na.rm = TRUE)) %>%
arrange(desc(AverageCrown))
largest_crown_genus <- genus_crown %>%
slice_max(AverageCrown, n = 1)
print(largest_crown_genus)
nc_sc_data <- merged_data %>%
mutate(Genus = str_extract(ScientificName, "^[^ ]+"))
genus_crown <- nc_sc_data %>%
group_by(Genus) %>%
summarise(AverageCrown = mean(`AvgCdia (m)`, na.rm = TRUE)) %>%
arrange(desc(AverageCrown))
largest_crown_genus <- genus_crown %>%
slice_max(AverageCrown, n = 1)
print(largest_crown_genus)
ggplot(genus_crown, aes(x = reorder(Genus, -AverageCrown), y = AverageCrown)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_text(
aes(label = ifelse(Genus == largest_crown_genus$Genus, round(AverageCrown, 2), "")),
vjust = -0.5,
color = "red",
size = 3
) +
theme_minimal() +
labs(
title = "Average Crown Size by Genus (NC & SC)",
x = "Genus",
y = "Average Crown Diameter (m)"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
annotate(
"text",
x = largest_crown_genus$Genus,
y = largest_crown_genus$AverageCrown + 0.5,
label = paste("Largest:", largest_crown_genus$Genus),
color = "red",
fontface = "bold"
)
nc_sc_data <- merged_data %>%
mutate(Genus = str_extract(ScientificName, "^[^ ]+"))
genus_crown <- nc_sc_data %>%
group_by(Genus) %>%
summarise(AverageCrown = mean(`AvgCdia (m)`, na.rm = TRUE)) %>%
arrange(desc(AverageCrown))
largest_crown_genus <- genus_crown %>%
slice_max(AverageCrown, n = 1)
print(largest_crown_genus)
ggplot(genus_crown, aes(x = reorder(Genus, -AverageCrown), y = AverageCrown)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_text(
aes(label = ifelse(Genus == largest_crown_genus$Genus, round(AverageCrown, 2), "")),
vjust = -0.5,
color = "red",
size = 3
) +
theme_minimal() +
labs(
title = "Average Crown Size by Genus (NC & SC)",
x = "Genus",
y = "Average Crown Diameter (m)"
) +
theme(axis.text.x = element_text(angle = 75, hjust = 1)) +
annotate(
"text",
x = largest_crown_genus$Genus,
y = largest_crown_genus$AverageCrown + 0.5,
label = paste("Largest:", largest_crown_genus$Genus),
color = "red",
fontface = "bold"
)
nc_sc_data <- merged_data %>%
mutate(Genus = str_extract(ScientificName, "^[^ ]+"))
genus_crown <- nc_sc_data %>%
group_by(Genus) %>%
summarise(AverageCrown = mean(`AvgCdia (m)`, na.rm = TRUE)) %>%
arrange(desc(AverageCrown))
largest_crown_genus <- genus_crown %>%
slice_max(AverageCrown, n = 1)
print(largest_crown_genus)
ggplot(genus_crown, aes(x = reorder(Genus, -AverageCrown), y = AverageCrown)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_text(
aes(label = ifelse(Genus == largest_crown_genus$Genus, round(AverageCrown, 2), "")),
vjust = -0.5,
color = "red",
size = 3
) +
theme_minimal() +
labs(
title = "Average Crown Size by Genus (NC & SC)",
x = "Genus",
y = "Average Crown Diameter (m)"
) +
theme(axis.text.x = element_text(angle = 75, hjust = 1)) +
annotate(
"text",
x = largest_crown_genus$Genus,
y = largest_crown_genus$AverageCrown + 0.5,
label = paste("Largest:", largest_crown_genus$Genus),
color = "red",
fontface = "bold"
)
age_analysis <- merged_data %>%
group_by(Genus) %>%
summarise(AverageAge = mean(Age, na.rm = TRUE), AverageCrown = mean(`AvgCdia (m)`, na.rm = TRUE)) %>%
arrange(desc(AverageCrown))
age_analysis <- nc_sc_data %>%
group_by(Genus) %>%
summarise(AverageAge = mean(Age, na.rm = TRUE), AverageCrown = mean(`AvgCdia (m)`, na.rm = TRUE)) %>%
arrange(desc(AverageCrown))
age_analysis <- nc_sc_data %>%
group_by(Genus) %>%
summarise(AverageAge = mean(Age, na.rm = TRUE), AverageCrown = mean(`AvgCdia (m)`, na.rm = TRUE)) %>%
arrange(desc(AverageCrown))
ggplot(age_analysis, aes(x = AverageAge, y = AverageCrown)) +
geom_point() +
geom_smooth(method = "lm") +
labs(title = "Relationship Between Age and Crown Size", x = "Average Age", y = "Average Crown Size") +
theme_minimal()
nc_sc_data <- nc_sc_data %>%
mutate(Species = str_extract(ScientificName, "(?<= )[a-z]+"))
nc_sc_data <- nc_sc_data %>%
mutate(Species = str_extract(ScientificName, "(?<= )[a-z]+"))
species_count <- nc_sc_data %>%
group_by(Genus) %>%
summarise(SpeciesCount = n_distinct(Species)) %>%
arrange(desc(SpeciesCount))
nc_sc_data <- nc_sc_data %>%
mutate(Species = str_extract(ScientificName, "(?<= )[a-z]+"))
species_count <- nc_sc_data %>%
group_by(Genus) %>%
summarise(SpeciesCount = n_distinct(Species)) %>%
arrange(desc(SpeciesCount))
print(species_count)
ggplot(species_count, aes(x = reorder(Genus, -SpeciesCount), y = SpeciesCount)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(
title = "Species Count by Genus (NC & SC)",
x = "Genus",
y = "Number of Distinct Species"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = SpeciesCount), vjust = -0.5, size = 3)
ggplot(species_count, aes(x = reorder(Genus, -SpeciesCount), y = SpeciesCount)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(
title = "Species Count by Genus (NC & SC)",
x = "Genus",
y = "Number of Distinct Species"
) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_text(aes(label = SpeciesCount), vjust = -0.5, size = 3)
genus_analysis <- genus_analysis %>%
mutate(CrownToAgeRatio = AverageCrown / AverageAge) %>%
arrange(desc(CrownToAgeRatio))
genus_analysis <- merged_data %>%
group_by(Genus) %>%
summarise(
AverageCrown = mean(`AvgCdia (m)`, na.rm = TRUE),
AverageAge = mean(Age, na.rm = TRUE)
) %>%
filter(!is.na(AverageCrown), !is.na(AverageAge))
merged_data <- merged_data %>%
mutate(Genus = str_extract(ScientificName, "^[^ ]+"))
genus_analysis <- merged_data %>%
group_by(Genus) %>%
summarise(
AverageCrown = mean(`AvgCdia (m)`, na.rm = TRUE),
AverageAge = mean(Age, na.rm = TRUE)
) %>%
filter(!is.na(AverageCrown), !is.na(AverageAge))
merged_data <- merged_data %>%
mutate(Genus = str_extract(ScientificName, "^[^ ]+"))
genus_analysis <- merged_data %>%
group_by(Genus) %>%
summarise(
AverageCrown = mean(`AvgCdia (m)`, na.rm = TRUE),
AverageAge = mean(Age, na.rm = TRUE)
) %>%
filter(!is.na(AverageCrown), !is.na(AverageAge))
genus_analysis <- genus_analysis %>%
mutate(CrownToAgeRatio = AverageCrown / AverageAge) %>%
arrange(desc(CrownToAgeRatio))
# View the top candidate
top_genus <- genus_analysis %>%
slice_max(CrownToAgeRatio, n = 1)
print(top_genus)
ggplot(genus_analysis, aes(x = reorder(Genus, -CrownToAgeRatio), y = CrownToAgeRatio)) +
geom_bar(stat = "identity", fill = ifelse(genus_analysis$Genus == top_genus$Genus, "red", "skyblue")) +
theme_minimal() +
labs(
title = "Crown-to-Age Ratio by Genus",
x = "Genus",
y = "Crown-to-Age Ratio"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(
aes(label = ifelse(Genus == top_genus$Genus, round(CrownToAgeRatio, 2), "")),
vjust = -0.5,
color = "black",
size = 3
) +
annotate(
"text",
x = which(genus_analysis$Genus == top_genus$Genus),
y = top_genus$CrownToAgeRatio + 0.1,
label = paste("Top Genus:", top_genus$Genus),
color = "red",
fontface = "bold"
)
